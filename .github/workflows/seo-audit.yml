name: SEO Audit

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to audit'
        required: true
        default: 'http://localhost:3000'
      paths:
        description: 'Comma-separated paths to test'
        required: false
        default: '/'
      form_factors:
        description: 'Form factors to test (mobile,desktop)'
        required: false
        default: 'mobile,desktop'

jobs:
  seo-audit:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        form-factor: [mobile, desktop]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run SEO Audit
      run: npm run test:seo
      env:
        BASE_URL: ${{ github.event.inputs.target_url || vars.BASE_URL || 'https://ricochet360.com' }}
        LH_FORM_FACTOR: ${{ matrix.form-factor }}
        LH_PATHS: ${{ github.event.inputs.paths || vars.LH_PATHS || '/, /pricing/, /get-a-demo' }}
        MIN_PERF: ${{ vars.MIN_PERF || '0.1' }}
        MIN_ACC: ${{ vars.MIN_ACC || '0.1' }}
        MIN_BP: ${{ vars.MIN_BP || '0.1' }}
        MIN_SEO: ${{ vars.MIN_SEO || '0.1' }}

    - name: Upload SEO Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: seo-report-${{ matrix.form-factor }}-${{ github.run_number }}
        path: |
          playwright-report/
          seo-report*.html
        retention-days: 90

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Look for HTML reports
          const reportFiles = [];
          try {
            const files = fs.readdirSync('.');
            const htmlFiles = files.filter(file => file.includes('seo-report') && file.endsWith('.html'));
            reportFiles.push(...htmlFiles);
          } catch (error) {
            console.log('No report files found');
          }
          
          let comment = `## üîç SEO Audit Results - ${context.payload.pull_request.title}\n\n`;
          comment += `**Form Factor:** ${matrix.form-factor}\n`;
          comment += `**Target URL:** ${process.env.BASE_URL}\n\n`;
          
          if (reportFiles.length > 0) {
            comment += `### üìä Reports Generated\n`;
            reportFiles.forEach(file => {
              comment += `- ${file}\n`;
            });
          } else {
            comment += `### ‚ö†Ô∏è No reports generated\n`;
          }
          
          comment += `\n**Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
